#!/usr/bin/env python3
"""
Generador Autom√°tico de Proyectos Asistidos por IA

Este script crea autom√°ticamente la estructura completa de un nuevo proyecto
siguiendo la metodolog√≠a definida en METODOLOGIA_IA_PROYECTOS.md.

Uso:
    python3 generador_proyecto.py

El script pedir√°:
- Nombre del proyecto
- Objetivo del proyecto
- Ruta donde crear el proyecto

Luego crear√° toda la estructura de carpetas y archivos base.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
import re


def sanitize_filename(name):
    """Convierte un nombre en un identificador v√°lido para archivos."""
    # Solo reemplaza caracteres inv√°lidos para nombres de archivos/carpetas
    # Mant√©n el nombre tal cual lo escribi√≥ el usuario
    sanitized = re.sub(r'[<>:"/\\|?*]', '', name)  # Solo caracteres inv√°lidos
    sanitized = sanitized.strip()  # Quita espacios al inicio y final
    return sanitized


def get_user_input():
    """Obtiene la informaci√≥n del proyecto del usuario."""
    print("üöÄ GENERADOR DE PROYECTOS ASISTIDOS POR IA")
    print("=" * 50)

    # Nombre del proyecto
    while True:
        project_name = input("\nüìù Nombre del proyecto: ").strip()
        if project_name:
            break
        print("‚ùå El nombre del proyecto no puede estar vac√≠o.")

    # Objetivo del proyecto
    while True:
        project_objective = input("\nüéØ Objetivo del proyecto: ").strip()
        if project_objective:
            break
        print("‚ùå El objetivo del proyecto no puede estar vac√≠o.")

    # Ruta donde crear el proyecto
    default_base_path = "/Users/ant/Library/CloudStorage/Dropbox/2 actions/_Cloud District/* - Proyectos Cloud"
    default_path = os.path.join(default_base_path, sanitize_filename(project_name))
    project_path = input(f"\nüìÅ Ruta del proyecto (por defecto: {default_path}): ").strip()
    if not project_path:
        project_path = default_path

    return {
        'name': project_name,
        'objective': project_objective,
        'path': Path(project_path),
        'safe_name': sanitize_filename(project_name),
        'date': datetime.now().strftime('%Y-%m-%d')
    }


def create_directory_structure(project_info):
    """Crea la estructura completa de carpetas del proyecto."""
    print("\nüèóÔ∏è  Creando estructura de carpetas...")

    directories = [
        "",  # directorio ra√≠z
        "docs",
        "docs/transcripciones",
        "docs/docs_tecnicos",
        "plantillas",
        "examples",
        "reglas",
        "outputs",
        "outputs/propuestas",
        "memoria"
    ]

    for directory in directories:
        path = project_info['path'] / directory
        path.mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {directory or 'directorio ra√≠z'}")


def generate_main_readme(project_info):
    """Genera el archivo PROYECTO_[NOMBRE]_README.md principal."""
    content = f"""# Generador Master de Proyectos Asistidos por IA - {project_info['name']}

**ESTE ES EL DIRECTORIO MASTER** que genera y gestiona el proyecto "{project_info['name']}" siguiendo la metodolog√≠a de IA asistida.

## Prop√≥sito del Proyecto
{project_info['objective']}

## Estructura del Proyecto
- **docs/**: Documentaci√≥n t√©cnica y transcripciones del desarrollo del proyecto
  - transcripciones/TRANSCRIPCIONES_README.md
  - docs_tecnicos/TECNICO_README.md
- **plantillas/**: Plantillas espec√≠ficas de este proyecto
- **examples/**: Ejemplos de outputs generados durante el desarrollo
- **reglas/**: Reglas y directivas para IA en este proyecto
- **outputs/**: Entregables del proyecto
  - propuestas/ - Versiones de propuestas (V1, V2, FINAL)
- **memoria/**: Memoria persistente del proyecto

## Proceso
Este proyecto sigue el proceso descrito en METODOLOGIA_IA_PROYECTOS.md, que incluye reuniones iniciales, investigaci√≥n asistida, generaci√≥n de propuestas, desarrollo y revisi√≥n, todo asistido por IA.

## Reglas Autom√°ticas para IA
**IMPORTANTE**: Cursor debe seguir estas reglas autom√°ticamente:

- **Memoria**: SIEMPRE actualizar `MEMORIA_PROYECTO_{project_info['safe_name']}.yaml` despu√©s de cambios significativos
- **Formato**: SIEMPRE usar Markdown para documentaci√≥n
- **Estructura**: SIEMPRE seguir la organizaci√≥n de carpetas definida
- **Revisi√≥n**: SIEMPRE cuestionar suposiciones e identificar riesgos
- **Contexto**: SIEMPRE consultar `docs/` antes de generar contenido
- **Proceso**: Seguir la secuencia: Reuni√≥n ‚Üí Investigaci√≥n ‚Üí Propuesta ‚Üí Desarrollo ‚Üí Revisi√≥n

## Archivos de Reglas
- `reglas/REGLAS_ESTILO_IA.yaml`: Directivas de estilo y prompts
- `reglas/REGLAS_CURSOR_IA.yaml`: Reglas espec√≠ficas para comportamiento autom√°tico
- `.cursorrules`: Configuraci√≥n autom√°tica para Cursor

## Nomenclatura
Este proyecto sigue la nomenclatura MAY√öSCULAS_CON_GUIONES para todos los archivos, facilitando la navegaci√≥n y b√∫squeda.

## Fases del Proyecto
- [ ] **Reuni√≥n Inicial**: Recopilar requisitos y objetivos
- [ ] **Investigaci√≥n**: An√°lisis de viabilidad y tecnolog√≠as
- [ ] **Propuesta**: Definir alcance, presupuesto y riesgos
- [ ] **Desarrollo**: Implementaci√≥n del proyecto
- [ ] **Revisi√≥n**: Validaci√≥n final y entrega

## Fecha de Inicio
{project_info['date']}

## Estado Actual
üîÑ **En Desarrollo** - Proyecto reci√©n creado

---
*Proyecto generado autom√°ticamente siguiendo METODOLOGIA_IA_PROYECTOS.md*
"""

    return content


def generate_docs_readme():
    """Genera el archivo docs/DOCS_README.md."""
    content = """# Documentaci√≥n del Proyecto

Este directorio contiene toda la documentaci√≥n t√©cnica y de proceso del proyecto.

## Estructura

### transcripciones/
Contiene las transcripciones de todas las reuniones, llamadas y sesiones importantes del proyecto.

- `reunion_inicial.md` - Primera reuni√≥n con el cliente
- `seguimiento_YYYY-MM-DD.md` - Reuniones de seguimiento
- `revision_final.md` - Reuni√≥n de cierre

### docs_tecnicos/
Documentaci√≥n t√©cnica espec√≠fica del proyecto.

- `especificaciones.md` - Requisitos t√©cnicos detallados
- `arquitectura.md` - Dise√±o de la soluci√≥n
- `investigacion.md` - An√°lisis t√©cnico realizado
- `recopilacion_fuentes_referencia.md` - Fuentes consultadas

## Convenciones

- Usar formato Markdown para todos los documentos
- Incluir fecha y participantes en transcripciones
- Mantener versi√≥n de documentos importantes
- Referenciar fuentes externas cuando sea relevante

## Proceso de Documentaci√≥n

1. **Reuniones**: Transcribir inmediatamente despu√©s
2. **T√©cnico**: Documentar decisiones y razonamientos
3. **Investigaci√≥n**: Guardar hallazgos y referencias
4. **Revisiones**: Actualizar documentos seg√∫n cambios

---
*Actualizado autom√°ticamente*
"""
    return content


def generate_transcripciones_readme():
    """Genera el archivo docs/transcripciones/TRANSCRIPCIONES_README.md."""
    content = """# Transcripciones de Reuniones

Este directorio contiene las transcripciones de todas las reuniones relacionadas con el proyecto.

## Formato de Archivos

Los archivos de transcripci√≥n siguen el formato:
```
reunion_[tipo]_[fecha].md
```

### Tipos de Reuni√≥n
- `inicial` - Primera reuni√≥n con el cliente
- `seguimiento` - Reuniones de progreso
- `revision` - Revisiones de entregables
- `cierre` - Reuni√≥n final

## Estructura de Transcripciones

Cada archivo debe incluir:

```markdown
# Reuni√≥n [Tipo] - [Fecha]

## Participantes
- Nombre 1 (Rol)
- Nombre 2 (Rol)

## Agenda
1. Tema 1
2. Tema 2

## Notas de la Reuni√≥n

### Tema 1
- Punto discutido
- Decisiones tomadas

### Tema 2
- Punto discutido
- Decisiones tomadas

## Acciones Pendientes
- [ ] Acci√≥n 1 - Responsable - Fecha l√≠mite
- [ ] Acci√≥n 2 - Responsable - Fecha l√≠mite

## Pr√≥xima Reuni√≥n
- Fecha: [Fecha]
- Agenda propuesta: [Temas]
```

## Proceso de Transcripci√≥n

1. **Durante la reuni√≥n**: Tomar notas en tiempo real
2. **Post-reuni√≥n**: Completar detalles y limpiar formato
3. **Distribuci√≥n**: Compartir con participantes relevantes
4. **Archivo**: Mantener en este directorio organizado por fecha

---
*Plantilla para transcripciones del proyecto*
"""
    return content


def generate_tecnico_readme():
    """Genera el archivo docs/docs_tecnicos/TECNICO_README.md."""
    content = """# Documentaci√≥n T√©cnica

Este directorio contiene toda la documentaci√≥n t√©cnica del proyecto, incluyendo especificaciones, arquitectura, investigaci√≥n y referencias.

## Estructura de Documentos

### especificaciones.md
- Requisitos funcionales y no funcionales
- Casos de uso detallados
- Criterios de aceptaci√≥n
- Restricciones t√©cnicas

### arquitectura.md
- Dise√±o de la soluci√≥n
- Diagramas de componentes
- Flujo de datos
- Decisiones arquitect√≥nicas

### investigacion.md
- An√°lisis de tecnolog√≠as
- Evaluaci√≥n de alternativas
- Benchmarking
- Recomendaciones t√©cnicas

### recopilacion_fuentes_referencia.md
- Fuentes consultadas
- Art√≠culos relevantes
- Documentaci√≥n de referencia
- Mejores pr√°cticas identificadas

## Convenciones T√©cnicas

### Nomenclatura
- Usar PascalCase para componentes
- camelCase para variables y funciones
- kebab-case para archivos y URLs
- UPPER_CASE para constantes

### Documentaci√≥n de C√≥digo
```python
def funcion_ejemplo(parametro):
    \"\"\"Descripci√≥n de la funci√≥n.

    Args:
        parametro: Descripci√≥n del par√°metro

    Returns:
        Descripci√≥n del valor retornado
    \"\"\"
    pass
```

### Diagramas
Usar formato Mermaid para diagramas:
```mermaid
graph TD
    A[Inicio] --> B[Proceso]
    B --> C[Fin]
```

## Versionado T√©cnico

- Mantener versiones de documentos cr√≠ticos
- Documentar cambios significativos
- Referenciar versiones en c√≥digo

---
*Documentaci√≥n t√©cnica del proyecto*
"""
    return content


def generate_plantillas_readme():
    """Genera el archivo plantillas/PLANTILLAS_README.md."""
    content = """# Plantillas del Proyecto

Este directorio contiene plantillas reutilizables para diferentes tipos de documentos y entregables del proyecto.

## Plantillas Disponibles

### email.md
Plantilla para comunicaciones por email:
- Saludos y presentaciones
- Estructura de contenido
- Cierres profesionales

### propuesta.md
Estructura para propuestas de proyecto:
- Objetivos y alcance
- Metodolog√≠a
- Cronograma y presupuesto
- Riesgos y mitigaciones

### informe.md
Formato para informes de progreso:
- Resumen ejecutivo
- Estado actual
- Pr√≥ximos pasos
- Riesgos identificados

### reunion.md
Plantilla para preparaci√≥n de reuniones:
- Objetivos de la reuni√≥n
- Agenda propuesta
- Materiales necesarios
- Participantes esperados

## Uso de Plantillas

1. **Copiar**: Copiar la plantilla al directorio apropiado
2. **Personalizar**: Adaptar contenido al contexto espec√≠fico
3. **Versionar**: Mantener versiones seg√∫n evoluci√≥n
4. **Mejorar**: Actualizar plantillas basadas en experiencia

## Convenciones

- Usar formato Markdown consistente
- Incluir placeholders con [CORCHETES]
- Documentar secciones opcionales
- Mantener ejemplos claros

## Mejora Continua

Las plantillas deben actualizarse regularmente bas√°ndose en:
- Retroalimentaci√≥n de usuarios
- Mejores pr√°cticas identificadas
- Nuevos tipos de documentos requeridos
- Cambios en procesos del proyecto

---
*Plantillas reutilizables del proyecto*
"""
    return content


def generate_ejemplos_readme():
    """Genera el archivo examples/EJEMPLOS_README.md."""
    content = """# Ejemplos del Proyecto

Este directorio contiene ejemplos de outputs generados durante el desarrollo del proyecto.

## Tipos de Ejemplos

### email_ejemplo.md
Ejemplos de emails enviados durante el proyecto:
- Comunicaci√≥n con cliente
- Coordinaci√≥n interna
- Reportes de progreso

### propuesta_ejemplo.md
Ejemplos de propuestas generadas:
- Versiones diferentes
- Enfoques alternativos
- Respuestas a RFP

### informe_ejemplo.md
Ejemplos de informes producidos:
- Informes de progreso
- Informes t√©cnicos
- Informes de cierre

## Estructura de Ejemplos

Cada ejemplo debe incluir:
- **Contexto**: Situaci√≥n en la que se gener√≥
- **Versi√≥n**: N√∫mero de versi√≥n o iteraci√≥n
- **Resultado**: Impacto o feedback recibido
- **Lecciones**: Aprendizajes obtenidos

## Uso de Ejemplos

Los ejemplos sirven para:
- **Referencia**: Modelos para nuevos documentos
- **Aprendizaje**: Ver evoluci√≥n del proyecto
- **Calidad**: Mantener est√°ndares consistentes
- **Mejora**: Identificar patrones exitosos

## Archivo de Ejemplos

Crear un nuevo ejemplo:
1. Generar el documento en el contexto apropiado
2. Copiarlo a este directorio con nombre descriptivo
3. Documentar el contexto y resultado
4. Actualizar este README si es necesario

## Hist√≥rico

| Fecha | Tipo | Descripci√≥n | Resultado |
|-------|------|-------------|-----------|
| - | - | - | - |

---
*Ejemplos del proyecto*
"""
    return content


def generate_outputs_readme():
    """Genera el archivo outputs/OUTPUTS_README.md."""
    content = """# Outputs del Proyecto

Este directorio contiene todos los entregables y resultados generados durante el desarrollo del proyecto.

## Estructura

### propuestas/
Versiones de propuestas y ofertas:
- `propuesta_v1.md` - Primera versi√≥n
- `propuesta_v2.md` - Versi√≥n revisada
- `propuesta_final.md` - Versi√≥n final entregada

### informes/
Informes generados durante el proyecto:
- `informe_progreso_mensual.md`
- `informe_tecnico.md`
- `informe_cierre.md`

### presentaciones/
Materiales de presentaci√≥n:
- `presentacion_cliente.pdf`
- `demo_prototipo.pdf`

## Versionado

Los documentos importantes siguen el esquema de versionado:
- **v1**: Primera versi√≥n completa
- **v2**: Versi√≥n con revisiones
- **final**: Versi√≥n definitiva entregada

## Convenciones de Nombres

- Usar prefijos descriptivos
- Incluir fechas cuando sea relevante
- Usar guiones bajos para separar palabras
- Mantener consistencia en formato

## Archivo y Organizaci√≥n

1. **Crear**: Generar documento en directorio apropiado
2. **Versionar**: Mantener versiones seg√∫n evoluci√≥n
3. **Documentar**: Registrar en este README
4. **Archivar**: Mover versiones obsoletas a subcarpetas

## Calidad de Outputs

Todos los outputs deben:
- ‚úÖ Revisarse por pares
- ‚úÖ Validarse contra requisitos
- ‚úÖ Documentar suposiciones
- ‚úÖ Incluir referencias a fuentes

---
*Entregables del proyecto*
"""
    return content


def generate_reglas_estilo(project_info):
    """Genera el archivo reglas/REGLAS_ESTILO_IA.yaml."""
    content = f"""rules:
  - name: Ser adversarial
    description: Siempre cuestiona suposiciones y identifica riesgos en revisiones.
    prompt_example: "@cursor: Scrutinize this ‚Äì identify flaws, assumptions, risks."

  - name: Mantener consistencia
    description: Usa Markdown para toda la documentaci√≥n y sigue la estructura de carpetas.
    prompt_example: "@cursor: Genera output en MD con secciones claras."

  - name: Identificar trade-offs
    description: En propuestas, destaca compromisos y alternativas.
    prompt_example: "@cursor: Examina factibilidad y escalabilidad."

  - name: Personalizar para {project_info['name']}
    description: Adaptar contenido al objetivo espec√≠fico del proyecto.
    prompt_example: "@cursor: Aseg√∫rate de que este contenido se alinee con el objetivo '{project_info['objective']}'."

  - name: Documentar decisiones
    description: Registrar razonamientos y alternativas consideradas.
    prompt_example: "@cursor: Documenta esta decisi√≥n en memoria_proyecto.yaml con alternativas consideradas."
"""
    return content


def generate_reglas_cursor(project_info):
    """Genera el archivo reglas/REGLAS_CURSOR_IA.yaml."""
    content = f"""reglas_cursor:
  description: Reglas espec√≠ficas para que Cursor siga autom√°ticamente en el proyecto "{project_info['name']}".

  memoria_automatica:
    - regla: "Actualizar MEMORIA_PROYECTO_{project_info['safe_name']}.yaml despu√©s de cada cambio significativo"
      descripcion: "Registrar insights, decisiones y razones en la memoria del proyecto"
      prompt: "@cursor: Actualiza memoria_proyecto.yaml con este insight: [descripci√≥n]"

    - regla: "Registrar cada interacci√≥n importante con la IA"
      descripcion: "Mantener historial de consultas y respuestas relevantes"
      prompt: "@cursor: Registra esta interacci√≥n en memoria_proyecto.yaml"

    - regla: "Documentar decisiones y alternativas consideradas"
      descripcion: "Explicar por qu√© se tom√≥ una decisi√≥n y qu√© otras opciones se evaluaron"
      prompt: "@cursor: Documenta esta decisi√≥n en memoria_proyecto.yaml con alternativas consideradas"

  estructura_archivos:
    - regla: "Usar Markdown para toda la documentaci√≥n"
      descripcion: "Mantener consistencia en el formato de archivos"
      prompt: "@cursor: Genera este contenido en formato Markdown"

    - regla: "Seguir la estructura de carpetas definida"
      descripcion: "Respetar la organizaci√≥n docs/, plantillas/, outputs/, etc."
      prompt: "@cursor: Guarda este archivo en la carpeta [nombre] seg√∫n la estructura del proyecto"

    - regla: "Versionar outputs con sufijos (v1, v2, final)"
      descripcion: "Mantener historial de versiones de propuestas e informes"
      prompt: "@cursor: Crea la versi√≥n [v1/v2/final] de este documento"

  revision_adversarial:
    - regla: "Siempre cuestionar suposiciones en revisiones"
      descripcion: "Identificar y validar premisas ocultas"
      prompt: "@cursor: Examina cr√≠ticamente este documento - identifica suposiciones no validadas"

    - regla: "Identificar riesgos autom√°ticamente"
      descripcion: "Detectar amenazas potenciales y vulnerabilidades"
      prompt: "@cursor: Analiza este contenido para identificar riesgos y amenazas"

    - regla: "Sugerir alternativas y trade-offs"
      descripcion: "Proponer opciones alternativas y explicar compromisos"
      prompt: "@cursor: Sugiere alternativas a este enfoque y explica los trade-offs"

  contexto:
    - regla: "Consultar docs/ antes de generar contenido"
      descripcion: "Usar RAG para acceder a documentaci√≥n existente"
      prompt: "@cursor: Bas√°ndote en la documentaci√≥n en docs/, genera [tipo de contenido]"

    - regla: "Referenciar transcripciones en propuestas"
      descripcion: "Incluir citas y referencias a reuniones previas"
      prompt: "@cursor: Integra hallazgos de las transcripciones en docs/transcripciones/"

    - regla: "Integrar hallazgos de investigaci√≥n"
      descripcion: "Conectar nueva informaci√≥n con investigaci√≥n previa"
      prompt: "@cursor: Conecta este hallazgo con la investigaci√≥n existente en docs/docs_tecnicos/"

  output:
    - regla: "Guardar en la carpeta correcta seg√∫n el tipo"
      descripcion: "Organizar outputs seg√∫n su naturaleza (propuestas, informes, presentaciones)"
      prompt: "@cursor: Guarda este [tipo de output] en outputs/[carpeta_apropiada]/"

    - regla: "Usar plantillas cuando est√©n disponibles"
      descripcion: "Aplicar formatos y estructuras predefinidas"
      prompt: "@cursor: Usa la plantilla de [plantillas/nombre_plantilla.md] para este contenido"

    - regla: "Mantener consistencia de formato"
      descripcion: "Aplicar el mismo estilo y estructura en documentos similares"
      prompt: "@cursor: Mant√©n consistencia con el formato de [documento_referencia]"

  flujo_trabajo:
    - regla: "Seguir el proceso de 5 pasos definido"
      descripcion: "Respetar la secuencia: reuni√≥n ‚Üí investigaci√≥n ‚Üí propuesta ‚Üí desarrollo ‚Üí revisi√≥n"
      prompt: "@cursor: ¬øEn qu√© fase del proceso estamos? ¬øQu√© deber√≠a ser el siguiente paso?"

    - regla: "Integrar con Teamwork cuando sea relevante"
      descripcion: "Crear tareas y actualizar estado en .teamwork.yaml"
      prompt: "@cursor: Crea tareas en Teamwork bas√°ndote en [documento] y actualiza .teamwork.yaml"

  proyecto_especifico:
    - regla: "Mantener foco en el objetivo del proyecto"
      descripcion: "Asegurar que todas las actividades contribuyan al objetivo '{project_info['objective']}'"
      prompt: "@cursor: ¬øC√≥mo contribuye esta tarea al objetivo principal del proyecto?"

    - regla: "Personalizar outputs para {project_info['name']}"
      descripcion: "Adaptar contenido y formato a las necesidades espec√≠ficas del proyecto"
      prompt: "@cursor: Personaliza este contenido para el contexto espec√≠fico de {project_info['name']}"
"""
    return content


def generate_memoria_proyecto(project_info):
    """Genera el archivo memoria/MEMORIA_PROYECTO_[NOMBRE].yaml."""
    content = f"""memoria:
  proyecto:
    nombre: "{project_info['name']}"
    descripcion: "{project_info['objective']}"
    fecha_inicio: "{project_info['date']}"
    estado: "recien_creado"
    fase_actual: "inicio"
    prioridad: "alta"

  estructura_carpetas:
    docs/transcripciones/: "Transcripciones de reuniones y sesiones del proyecto"
    docs/docs_tecnicos/: "Documentaci√≥n t√©cnica y especificaciones del proyecto"
    plantillas/: "Plantillas reutilizables espec√≠ficas del proyecto"
    outputs/propuestas/: "Versiones de propuestas (V1, V2, FINAL)"
    reglas/: "Reglas y directivas para IA en este proyecto"
    memoria/: "Memoria persistente y diario del proyecto"
    examples/: "Ejemplos de outputs generados"

  entries:
    - date: "{project_info['date']}"
      tipo: "creacion_proyecto"
      titulo: "Creaci√≥n autom√°tica del proyecto"
      insight: "Proyecto '{project_info['name']}' creado autom√°ticamente siguiendo metodolog√≠a IA asistida"
      acciones: ["Creaci√≥n de estructura de carpetas", "Generaci√≥n de archivos base", "Configuraci√≥n de reglas"]
      estado: "completado"
      fuente: "Script generador_proyecto.py"

  decisiones_tomadas:
    - fecha: "{project_info['date']}"
      decision: "Proyecto generado autom√°ticamente"
      razon: "Uso del generador master para asegurar consistencia metodol√≥gica"
      impacto: "Alto - establece base s√≥lida del proyecto"

  proximos_pasos:
    - accion: "Configurar repositorio Git"
      prioridad: "alta"
      dependencias: []
      estimacion: "30 minutos"

    - accion: "Programar reuni√≥n inicial con stakeholders"
      prioridad: "alta"
      dependencias: []
      estimacion: "1-2 d√≠as"

    - accion: "Definir alcance detallado del proyecto"
      prioridad: "alta"
      dependencias: ["Reuni√≥n inicial"]
      estimacion: "2-3 d√≠as"

  metricas:
    archivos_creados: 0
    carpetas_estructuradas: 6
    reglas_definidas: 2
    plantillas_disponibles: 0

  riesgos_identificados:
    - riesgo: "Alcance no claramente definido"
      probabilidad: "alta"
      impacto: "alto"
      mitigacion: "Realizar reuni√≥n inicial detallada y documentar requisitos"

    - riesgo: "Falta de participaci√≥n de stakeholders clave"
      probabilidad: "media"
      impacto: "alto"
      mitigacion: "Identificar y confirmar participaci√≥n de todos los interesados"

  referencias_documentos:
    - documento: "PROYECTO_{project_info['safe_name']}_README.md"
      proposito: "Documentaci√≥n principal del proyecto"
      estado: "generado"

    - documento: "reglas/REGLAS_CURSOR_IA.yaml"
      proposito: "Reglas autom√°ticas para comportamiento de IA"
      estado: "generado"

    - documento: "reglas/REGLAS_ESTILO_IA.yaml"
      proposito: "Directivas de estilo y formato"
      estado: "generado"
"""
    return content


def generate_cursorrules(project_info):
    """Genera el archivo .cursorrules."""
    content = f"""# Reglas autom√°ticas para Cursor en el proyecto "{project_info['name']}"

## Contexto del Proyecto
Este proyecto "{project_info['name']}" sigue el proceso asistido por IA descrito en METODOLOGIA_IA_PROYECTOS.md.

**Objetivo**: {project_info['objective']}

## Reglas Obligatorias
- SIEMPRE actualiza MEMORIA_PROYECTO_{project_info['safe_name']}.yaml despu√©s de cambios significativos
- SIEMPRE usa Markdown para documentaci√≥n
- SIEMPRE sigue la estructura de carpetas definida
- SIEMPRE cuestiona suposiciones en revisiones
- SIEMPRE consulta docs/ antes de generar contenido
- SIEMPRE mant√©n foco en el objetivo: "{project_info['objective']}"

## Estructura de Carpetas
- docs/transcripciones/ - Transcripciones de reuniones
- docs/docs_tecnicos/ - Documentaci√≥n t√©cnica
- plantillas/ - Plantillas reutilizables
- examples/ - Ejemplos de outputs
- outputs/propuestas/ - Versiones de propuestas (V1, V2, FINAL)
- reglas/ - Reglas y directivas para IA
- memoria/ - Memoria persistente del proyecto

## Archivos de Reglas
- reglas/REGLAS_ESTILO_IA.yaml - Directivas de estilo y prompts
- reglas/REGLAS_CURSOR_IA.yaml - Reglas espec√≠ficas para comportamiento autom√°tico

## Proceso a Seguir
1. Reuni√≥n inicial ‚Üí 2. Investigaci√≥n ‚Üí 3. Propuesta ‚Üí 4. Desarrollo ‚Üí 5. Revisi√≥n

## Comportamiento Adversarial
Siempre identifica riesgos, suposiciones no validadas y sugiere alternativas.

## Proyecto Espec√≠fico
- Nombre: {project_info['name']}
- Objetivo: {project_info['objective']}
- Fecha inicio: {project_info['date']}
"""
    return content


def generate_teamwork_config(project_info):
    """Genera el archivo .teamwork.yaml."""
    content = f"""# Configuraci√≥n de Teamwork para el proyecto "{project_info['name']}"

# ID del proyecto en Teamwork (se configurar√° despu√©s de crear el proyecto)
project_id: null

# Configuraci√≥n de tareas por defecto
default_task_settings:
  priority: "normal"
  estimated_hours: 4
  tags: ["{project_info['safe_name']}"]

# Estados de tareas a mapear
task_status_mapping:
  pendiente: "new"
  en_progreso: "in_progress"
  completada: "completed"
  bloqueada: "on_hold"

# Columnas del board Kanban
kanban_columns:
  - name: "Por Hacer"
    status: "new"
  - name: "En Progreso"
    status: "in_progress"
  - name: "En Revisi√≥n"
    status: "pending"
  - name: "Completado"
    status: "completed"

# Configuraci√≥n de notificaciones
notifications:
  task_assigned: true
  task_completed: true
  project_updates: true

# Integraci√≥n con fases del proyecto
project_phases:
  - name: "Reuni√≥n Inicial"
    description: "Recopilar requisitos y objetivos"
  - name: "Investigaci√≥n"
    description: "An√°lisis t√©cnico y viabilidad"
  - name: "Propuesta"
    description: "Definir alcance y presupuesto"
  - name: "Desarrollo"
    description: "Implementaci√≥n del proyecto"
  - name: "Revisi√≥n"
    description: "Validaci√≥n y entrega final"

# Metadatos del proyecto
metadata:
  nombre: "{project_info['name']}"
  objetivo: "{project_info['objective']}"
  fecha_creacion: "{project_info['date']}"
  metodologia: "IA_Asistida"
"""
    return content


def create_files(project_info):
    """Crea todos los archivos base del proyecto."""
    print("\nüìÑ Creando archivos base...")

    files_to_create = [
        # Archivo principal
        (f"PROYECTO_{project_info['safe_name']}_README.md", generate_main_readme(project_info)),

        # Documentaci√≥n
        ("docs/DOCS_README.md", generate_docs_readme()),
        ("docs/transcripciones/TRANSCRIPCIONES_README.md", generate_transcripciones_readme()),
        ("docs/docs_tecnicos/TECNICO_README.md", generate_tecnico_readme()),

        # Plantillas y ejemplos
        ("plantillas/PLANTILLAS_README.md", generate_plantillas_readme()),
        ("examples/EJEMPLOS_README.md", generate_ejemplos_readme()),

        # Outputs
        ("outputs/OUTPUTS_README.md", generate_outputs_readme()),

        # Reglas
        ("reglas/REGLAS_ESTILO_IA.yaml", generate_reglas_estilo(project_info)),
        ("reglas/REGLAS_CURSOR_IA.yaml", generate_reglas_cursor(project_info)),

        # Memoria
        (f"memoria/MEMORIA_PROYECTO_{project_info['safe_name']}.yaml", generate_memoria_proyecto(project_info)),

        # Configuraci√≥n
        (".cursorrules", generate_cursorrules(project_info)),
        (".teamwork.yaml", generate_teamwork_config(project_info)),
    ]

    for filename, content in files_to_create:
        filepath = project_info['path'] / filename
        filepath.parent.mkdir(parents=True, exist_ok=True)

        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)

        print(f"  ‚úÖ {filename}")


def create_gitignore(project_info):
    """Crea un archivo .gitignore b√°sico."""
    content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Project specific
outputs/final/
*.log
.env
"""

    filepath = project_info['path'] / '.gitignore'
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)

    print("  ‚úÖ .gitignore")


def main():
    """Funci√≥n principal del generador de proyectos."""
    try:
        # Obtener informaci√≥n del proyecto
        project_info = get_user_input()

        # Confirmar creaci√≥n
        print(f"\nüìã Resumen del proyecto:")
        print(f"   Nombre: {project_info['name']}")
        print(f"   Objetivo: {project_info['objective']}")
        print(f"   Ruta: {project_info['path']}")

        confirm = input("\n¬øProceder con la creaci√≥n del proyecto? (s/n): ").strip().lower()
        if confirm not in ['s', 'si', 'yes', 'y']:
            print("‚ùå Creaci√≥n cancelada.")
            return

        # Crear estructura de carpetas
        create_directory_structure(project_info)

        # Crear archivos base
        create_files(project_info)

        # Crear .gitignore
        create_gitignore(project_info)

        print("\nüéâ ¬°Proyecto creado exitosamente!")
        print(f"üìÇ Ruta del proyecto: {project_info['path']}")
        print("\nüìã Pr√≥ximos pasos recomendados:")
        print("1. Revisar y personalizar los archivos generados")
        print("2. Inicializar repositorio Git: git init")
        print("3. Crear primera reuni√≥n inicial")
        print("4. Configurar Teamwork si es necesario")
        print("5. Comenzar con la fase de investigaci√≥n")

        # Moverse al directorio del proyecto y abrir herramientas
        try:
            # Cambiar al directorio del proyecto
            os.chdir(project_info['path'])
            print(f"üìÇ Cambiado al directorio: {project_info['path']}")

            if sys.platform == "darwin":  # macOS
                # Abrir Cursor en el directorio del proyecto
                print("üöÄ Abriendo Cursor...")
                result = os.system("open -a 'Cursor' . 2>/dev/null")
                if result != 0:
                    print("‚ö†Ô∏è  No se pudo abrir Cursor autom√°ticamente.")
                    print("   Puedes abrirlo manualmente desde la carpeta del proyecto.")
                # Tambi√©n abrir el Finder para referencia
                os.system(f"open '{project_info['path']}'")
            elif sys.platform == "linux":
                os.system(f"xdg-open '{project_info['path']}'")
                # Intentar abrir VS Code si est√° disponible
                os.system("code . 2>/dev/null || echo 'Instala VS Code o Cursor para edici√≥n autom√°tica'")
            elif sys.platform == "win32":
                os.system(f"explorer '{project_info['path']}'")
                # Intentar abrir VS Code si est√° disponible
                os.system("code . 2>/dev/null || echo 'Instala VS Code o Cursor para edici√≥n autom√°tica'")
        except Exception as e:
            print(f"‚ö†Ô∏è  No se pudo abrir autom√°ticamente el editor: {e}")
            print("Puedes navegar manualmente a la carpeta del proyecto.")

    except KeyboardInterrupt:
        print("\n‚ùå Proceso interrumpido por el usuario.")
    except Exception as e:
        print(f"\n‚ùå Error durante la creaci√≥n del proyecto: {e}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
